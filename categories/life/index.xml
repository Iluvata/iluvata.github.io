<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>life on Iluvata&#39;s Blog</title>
    <link>https://iluvata.github.io/categories/life/</link>
    <description>Recent content in life on Iluvata&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Apr 2023 13:53:31 +0800</lastBuildDate><atom:link href="https://iluvata.github.io/categories/life/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BUAACTF2023 WP</title>
      <link>https://iluvata.github.io/post/2023-04-26_buaactf2023/</link>
      <pubDate>Wed, 26 Apr 2023 13:53:31 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2023-04-26_buaactf2023/</guid>
      <description>crypto  Block Cipher  直接写个解密
def decrypt(parts): iv = b&amp;#39;\xba=y\xa3\xc6)\xcf\xf7&amp;#39; key = b&amp;#39;}6E\xeb(\x91\x08\xa0&amp;#39; results = [] for index, part in enumerate(parts): results.append(reduce(xor, [part, iv if index == 0 else parts[index-1], key])) return results      pwn  NLP  pwntools使用。后面的信息提取有点恶心
#encoding: utf-8 from pwn import * p = remote(&amp;#34;10.212.26.206&amp;#34;, &amp;#34;23004&amp;#34;) for i in range(20): p.recvuntil(&amp;#34;A = :&amp;#34;) a = int(p.recvline()) p.recvuntil(&amp;#34;B = :&amp;#34;) b = int(p.</description>
    </item>
    
    <item>
      <title>BUAACTF2022 WP</title>
      <link>https://iluvata.github.io/post/2022-03-28_buaactf2022/</link>
      <pubDate>Mon, 28 Mar 2022 13:53:31 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2022-03-28_buaactf2022/</guid>
      <description>crypto  ez game  求逆，哈希碰撞
from pwn import * from gmpy2 import invert p = remote(&amp;#34;101.43.185.64&amp;#34;, &amp;#34;43089&amp;#34;) # p = remote(&amp;#34;49.232.31.80&amp;#34;, &amp;#34;8088&amp;#34;) p.recvuntil(&amp;#34;y)\n&amp;#34;) p.sendline(&amp;#39;1&amp;#39;) sleep(1) for i in range(300): p.recvuntil(&amp;#34;m): (&amp;#34;) a = int(p.recvuntil(&amp;#34;, &amp;#34;, drop=True)) b = int(p.recvuntil(&amp;#34;)&amp;#34;, drop=True)) # p.interactive() p.sendline(str(invert(a, b))) log.success(str(i)) p.interactive()  from pwn import * x = &amp;#34;d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70&amp;#34;.decode(&amp;#34;hex&amp;#34;) y = &amp;#34;d131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f8955ad340609f4b30283e4888325f1415a085125e8f7cdc99fd91dbd7280373c5bd8823e3156348f5bae6dacd436c919c6dd53e23487da03fd02396306d248cda0e99f33420f577ee8ce54b67080280d1ec69821bcb6a8839396f965ab6ff72a70&amp;#34;.decode(&amp;#34;hex&amp;#34;) # print(hashlib.md5(x).hexdigest()) # print(hashlib.md5(y).hexdigest()) p = remote(&amp;#34;49.232.31.80&amp;#34;, &amp;#34;8088&amp;#34;) p.recvuntil(&amp;#34;y)\n&amp;#34;) p.sendline(&amp;#39;2&amp;#39;) sleep(2) p.</description>
    </item>
    
    <item>
      <title>最大似然估计与基本演绎法</title>
      <link>https://iluvata.github.io/post/2021-04-19_likehood-reasoning/</link>
      <pubDate>Mon, 19 Apr 2021 19:00:13 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-04-19_likehood-reasoning/</guid>
      <description>在数理统计中，极大似然估计是一种使用已知样本来反推最大概率的模型参数的方法。比如我们知道（或者推测）某个 随机变量服从正态分布，但是不知道分布的参数值。如果我们能够获取到几个分布中的样本，就可以对其进行拟合，尝试 得到最有可能的参数值来确定该分布。那具体要怎么通过样本来得到分布的参数呢？
 极大似然估计使用了一种最符合直觉的方法，即使用取到这些样本组合概率最大的参数。这个过程和福尔摩斯使用的基本演绎法 及其相似。在《四签名》中，福尔摩斯在推理凶手的逃跑路线（没想到吧jojo，这就是我的逃跑路线啊，wryyyyy 23333） 的时候说，当你排除了所有不可能的情况后，剩下的，不管多不可能，就是事实。类似的方法还在《巴斯克维尔的猎犬》中 福尔摩斯推断来访者身份以及许多其他地方中使用过。如果把你扔到二等车厢，让你指出每个人的职业，你会怎么做。首先 当然是对对象进行观察，观察他们的衣着，膝盖，手腕，衣领。得到的结果，比如说一个人的膝盖上有泥土，就是数理统计 中的样本。给定了一系列的样本，如手腕上有粉末，衣领上有灰，脚上穿着皮鞋，戴着眼镜；这些结合在一起得到了样本空间。 我们会怎么推断这个人的职业呢？符合这些样本情况的职业可能有很多，还可能有一些样本是由于一些意外的活动引起的。但是一般 来说，我们不会把这个人的职业判断成运动员。尽管由于一系列的小概率事件使得一位运动员打扮成这样，但我们的推理是基于 最有可能导致这些样本的情况进行的。这也就是最大似然的思想方式。
 回到概率统计中，那在数学上该如何计算参数值呢？我们将几个样本值分别带入分布公式，要求的参数作为变量，将每个样本 得到的对应概率表达式相乘作为联合概率（需要各样本相互独立），把取到使得该联合概率最大的值拿来当作目标参数值。 再往下更具体的计算步骤包括处理联合概率（即极大似然目标函数），希望求解使其最大化的最优化问题。一般的方法是 对其做对数处理，然后求导，使得导数为0的参数值能让目标函数取到极大值，就是我们要求的值了。</description>
    </item>
    
    <item>
      <title>在org mode中嵌入latex</title>
      <link>https://iluvata.github.io/post/2021-02-22_latex-with-emacs/</link>
      <pubDate>Mon, 22 Feb 2021 23:30:15 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-02-22_latex-with-emacs/</guid>
      <description>最近写博客发现就算在想着办法避免使用数学公式，在写有关算法，更不用说数学博客的时候还是不可避免的会碰上好多需要使用latex的情况。 于是干脆在这里记一下怎么在org mode中内嵌latex。
\begin{equation} % arbitrary environments, x=\sqrt{b} % even tables, figures \end{equation} % etc
 If $a^2=b$ and \( b=2 \), then the solution must be either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].
 但是虽然orgmode支持的latex能导出pdf，hugo生成的html网页还是不支持。
 参考链接：官方文档 Spacemacs和Org-mode和LaTeX Hugo中的LaTeX渲染 Hugo中添加LaTeX渲染</description>
    </item>
    
    <item>
      <title>2020年度回顾以及新年目标</title>
      <link>https://iluvata.github.io/post/2021-02-16_yearly-review/</link>
      <pubDate>Tue, 16 Feb 2021 19:00:39 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-02-16_yearly-review/</guid>
      <description>2020简要回顾  今天是农历大年初五，是个对过去一年进行复盘与新的一年进行规划的好时机。我的过去一年如果用两个词来总结的话应该就是疫情和考研了。由于疫情，前半年我是在家里度过的；后半年到了学校后也是一直在准备考研。
 年初（可能年前就开始了）的时候，由于在家无聊，我开始疯狂追番，然后好像一直看到5月。。。我能记得的那几个月看的番有：碧蓝之海，clannad，青春猪头少年，实教，春物，冰菓，日在校园，笨蛋测验召唤兽，月色真美， 魔法少女小圆，白色相簿2，四谎，k-on 等等。3月开始上网课，4月甚至逃了2周的课从早到晚看小说追完了春物，还在网上买了大老师最喜欢的max咖啡（不得不说还算不错，特别是在5月锻炼完洗了澡后来一罐冰冰的max的感觉贼舒爽）。。
 然后正式开始准备考研应该是在5月中旬，开始的一个月还在看k-on，每天瞎看几个小时数学，然后看几个小时动漫。。
  3月之前还有在一边查考研院校信息一边准备PAT，基本上甲级的题库快刷完了。但最后开学的时间一直在推就把报名退了。代码放在这个仓库。考研一开始选了4个学校：上海科技大学，川大，北航，浙大。最后确定了北航。
 2-3月还开始了英语背单词，于是年后那一两个月的生活就是早上11-12点起床，中午吃了午饭后背背百词斩，下午做个4-5道pat，晚饭后开始看动漫到两三点。 从5月期中考那段时间开始，感觉回校应该无望了，就买了考研书开始准备起来。之后具体的安排写在考研初试里面。8月回校，每天抽点时间准备了大三下的期末考。接着9月学校安排了实训。10月开始可以一心备考，到12月底考完。
 考完后马上在牛客网上投了几份实习简历，回家。十几份简历只有一份网易北京测开的给了面试，然后拿到offer在1月中到北京开始实习。实习到现在也有一个月了，考完初试快2个月了，离复试差不多剩1个月。这期间一边玩一边随便看点 复试有关的东西。是时候开始全力准备复试了。
  考研初试  3-5月  从3月开始就一直在查院校信息。这时每天中午用百词斩背单词，悠哉游哉的看动漫，开始上网课后 也会登上去听。考北航一部分原因是之前12月的CSP考了320分，看有哪些院校考研可以用上的时候 看到了北航。对于CSP考试我感觉考个300分一点也不难，之前完全没准备过，上场后不要慌，第3题 慢慢写能写出来。前3题拿满后再看下后两题能不能骗点分。要强行说我为这个考试做了什么准备的话 可能只有大二下学期的时候（还是大三上？我有点忘了。。。）照着一个知识点清单把算法导论中的 重点章节啃完了。。。还有就是可能刷了一点leetcode题。那时候还没开始刷PAT，但事实证明刷了 PAT之后去考CSP也没多大帮助，前三题基本用不到什么算法，细心点慢慢写，不要急就能做出来。。
 4月买了恋恋有词开始背。每天早上一个list，按照记忆曲线复习。我在第一遍背的时候先用emacs把 不熟的单词整理出来，之后重复背的时候就直接在emacs上背。
  还可以直接在上面直接做时间规划，每次调出agenda页面后直接就可以跳转到当天要背的列表。
  自己整理的好处除了能够量身定制词汇表外，遇到自己容易混淆的几个单词也能整理在一起，通过 链接跳转。还有就是emacs全键盘操作，效率很高。
 恋恋有词总共就30个list，到5月就背完了。背完了后除了继续复习一轮中按照记忆曲线没结束的 列表，每天靠午休的时候摸鱼看英文小说新增单词。4月到5月中一个半月时间居然看完了福尔摩斯 里血字的研究和一半的四签名。。在用emacs背恋恋有词期间（直到考完），手机上用app背单词 也没停。不过背单词的软件倒是换了几个，从3月前的百词斩换成默默，之后变成扇贝，可以说每个 软件上都快背完一本书但就是没背完。。。
 这3个月基本每天只花了一点时间在考研英语上，不知不觉时间就混过去了。后面买了李正元全书， 花2周囫囵吞枣看了一遍但感觉完全没用。。。
  6-7月  5月中旬开始我每天规定了7个小时的学习时间，算是正式开始准备考研了。因为在家里容易偷懒， 我用上了之前买的滴答清单会员来制定每天的学习计划。
  滴答清单里面可以记录习惯打卡，我每天上午做3小时的数学，下午3小时的专业课，晚上2小时数学 习题。每次点击可以记录半小时。滴答清单有个番茄时钟的功能（需要会员），我就按照番茄计时 每次学25分钟，完成后点一下习惯记录算学了半小时，休息5分钟。但其实一般很少25分钟准时休息， 都是完成了计时结束时正在做的那道题或学的那个知识点后再休息，所经常会超时，平均算学了半小时 也不算过分吧2333. 一开始在休息的时候还经常会拿起 手机来玩，很快发现5分钟休息玩手机根本不能起到休息的作用，而且一不注意就容易忽略计时器 提醒继续玩下去。后来感觉最好的休息方式还是啥都不干，坐着冥想哈哈。 一开始买了滴答会员后我还加了个习惯：每天冥想10分钟，没想到坚持了半年直到开学，成了我 坚持最久完成率最高的习惯。。训练放空思想可能对专注确实起到了一些作用吧。
 当时我还在自己的阿里云服务器上搭了个nextcloud网盘，把每天用emacs记录的单词直接放在上面。 除此之外，每天晚上还会总结一下当天学的东西，在orgmode里写下来放上去。这时我是每周周日 休息一天，在休息日会看着上周每天总结的东西再做一个周总结。我把放总结笔记的文件夹叫做 watson，就像想把学过的东西教给他一样去总结哈哈。</description>
    </item>
    
    <item>
      <title>在spacemacs中写scheme</title>
      <link>https://iluvata.github.io/post/2021-02-02_scheme-in-emacs/</link>
      <pubDate>Tue, 02 Feb 2021 22:35:46 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-02-02_scheme-in-emacs/</guid>
      <description>参考资料：官方文档 在spacemacs安装scheme环境 在emacs里学习SICP geiser文档
windows安装  一开始看官方文档和 在spacemacs安装scheme环境 做了好久，试图在windows上搭起环境，但是中间遇到好多问题，这里记下几个。。
 首先是 chicken 的安装。文档只说了apt包，但其实pip包也可以？（没试过）。我用的是windows的chocolatey，成功安装了。
 在安装了 chicken 后，为了完整安装对应文档（不知道为什么不能把文档放到同个包里一起安装了。。。），还要运行一下命令：
$ chicken-install -s apropos chicken-doc $ cd `csi -p &amp;#39;(chicken-home)&amp;#39;` $ curl https://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz | sudo tar zx  在尝试用powershell运行第一条指令时提示不存在cp指令中断了。查了好久资料后发现可以用git shell运行成功。
 然后第二条指令其实是运行 csi chicken scheme 解释器后运行 &amp;#39;(chicken-home)&amp;#39; ，结果作为输出，进入chicken安装目录。
 我在安装chicken包时看到安装目录在 c:/tools/chicken 下，就直接转过去了（不知道为什么，解释器中这条命令也运行失败。。）
 最后是在当前目录下载chicken-doc并且解tar包。但我是在windows下，就手动用浏览器访问https://3e8.org/pub/chicken-doc/ 发现有zip包，下载下来解压后放到 c:/tools/chicken 下，这步也算完成了。
 接着按照第二个博客中的步骤，确实可以运行了，但看不到输出也不会报错，重启后甚至又不能运行了。。。
 太折磨人了，明天试下转到linux用第三个博客中的步骤。
  linux安装配置  在 dotspacemacs-configuration-layers 中添加scheme, 在终端安装 mit-scheme 。emacs打开scm文件后 M-x run-geiser ，回到scm文件窗口 C-c C-s 选择mit.</description>
    </item>
    
    <item>
      <title>用easy-hugo在spacemacs中写hugo博客</title>
      <link>https://iluvata.github.io/post/2021-02-02_hugo-with-emacs/</link>
      <pubDate>Tue, 02 Feb 2021 21:52:48 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-02-02_hugo-with-emacs/</guid>
      <description>配置easy-hugo layer  我在github上找到有人写了spacemacs的easy-hugo layer，可以直接用，地址在这里. 把这个仓库中的 packages.el 放到自己的 .emacs.d/private/hugo 文件夹下就可以了. 然后在 .spacemacs 文件中的 dotspacemacs-configuration-layers 中添加 hugo 层.  这时候如果直接运行 M-x easy-hugo 会提示找不到 easy-hugo-basedir ，在.spacemacs 文件夹下的 user-config 项中加上 (setq easy-hugo-basedir &amp;#34;your-path-to-hugo-basedir&amp;#34;) 重新载入就可以运行了。   运行指南  在输入 M-x easy-hugo 进入easy-hugo mode 后，这个layer已经帮我们重新绑定了几个快捷键    Key Binding Description     SPC m n &amp;#39;easy-hugo-newpost   SPC m D &amp;#39;easy-hugo-article   SPC m p &amp;#39;easy-hugo-preview   SPC m P &amp;#39;easy-hugo-publish   SPC m o &amp;#39;easy-hugo-open   SPC m d &amp;#39;easy-hugo-delete~   SPC m c &amp;#39;easy-hugo-open-config   SPC m f &amp;#39;easy-hugo-open   SPC m N &amp;#39;easy-hugo-no-help   SPC m v &amp;#39;easy-hugo-view   SPC m r &amp;#39;easy-hugo-refresh   SPC m s &amp;#39;easy-hugo-sort-time   SPC m S &amp;#39;easy-hugo-sort-char   SPC m G &amp;#39;easy-hugo-github-deploy   SPC m A &amp;#39;easy-hugo-amazon-s3-deploy   SPC m C &amp;#39;easy-hugo-google-cloud-storage-deploy   SPC m q &amp;#39;evil-delete-buffer     如果记不住，按下 SPC 后就会有提示  比如 SPC m n 创建新文章</description>
    </item>
    
    <item>
      <title>hugo 博客配置</title>
      <link>https://iluvata.github.io/post/2021-01-27_hugo-config/</link>
      <pubDate>Wed, 27 Jan 2021 10:58:42 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-01-27_hugo-config/</guid>
      <description> 主题配置  我创建了一个包含整个博客目录的仓库，在这里，以便在不同的地方随时pull下来
 需要注意的是这个仓库中还嵌套包含了另外两个仓库，页面仓库对应public文件夹，以及 dream主题仓库，对应themes/dream文件夹
  02-19注：之前以为删了dream里面的.git就可以直接管理整个博客了，后面发现并不行。需要用 git rm --cached themes/dream 把git子模块去掉
  主题内容配置文件为config.toml，其中配置的路径都是从themes/dream/static文件夹开始的相对路径.
 如配置头像所用的avatar=&amp;#34;/img/avatar.png&amp;#34;实际所在位置为themes/dream/static/img/avatar.png
 修改封面图片：文章添加参数&amp;#34;cover&amp;#34; cover:/img/somepicture.png
 添加tag和category: 在文章头部添加参数tags: [&amp;#34;tag1&amp;#34;, &amp;#34;tag2&amp;#34;]，categories: [&amp;#34;category1&amp;#34;, &amp;#34;category2&amp;#34;]
   插入附件  文章嵌入代码：用#+begin_src和#+end_src表示代码
print(&amp;#34;hello world&amp;#34;)   插入图片：用
[[图片路径]]     </description>
    </item>
    
  </channel>
</rss>
