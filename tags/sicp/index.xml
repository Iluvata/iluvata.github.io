<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sicp on Iluvata&#39;s Blog</title>
    <link>https://iluvata.github.io/tags/sicp/</link>
    <description>Recent content in sicp on Iluvata&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 07 Apr 2021 16:03:50 +0800</lastBuildDate><atom:link href="https://iluvata.github.io/tags/sicp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>迭代与递归</title>
      <link>https://iluvata.github.io/post/2021-04-07_iteration-and-recurtion/</link>
      <pubDate>Wed, 07 Apr 2021 16:03:50 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-04-07_iteration-and-recurtion/</guid>
      <description>递归处理与递归过程  用一个经典的递归例子：阶乘 来说明。
(define (factorial n) (if (= n 1) 1 (* n factorial (- n 1))))  以上是经典的阶乘的递归处理，若输入为1则输出1,否则结果为当前n×递归执行n-1.
(define (factorial n) (fact-iter 1 1 n)) (define (fact-iter product counter max-count) (if (&amp;gt; counter max-count) product (fact-iter (* counter product) (+ count 1) max-count)))  以上是阶乘的迭代处理。我们在每一次迭代（循环）中输入了得到下一结果所需的所有信息，编译器无需像在递归处理中一样 保存每次n的值以计算最后的结果。
 但是用我们熟悉的c语言来理解以上这段代码，我们会觉得在形式上 fact-iter 函数在函数体中调用了自身，也应该算作 递归而不是迭代。在c语言中，我们理解的迭代是使用 for 或 while 在代码块中显式地更改变量，以上代码很明显 没有使用“循环”。这就引出了递归过程与递归处理的区别。以上代码使用的确实是我们在c语言中称作“递归过程”的代码形式， 但根据我们对“迭代处理”的定义，即编译器无需保存中间变量，它很显然是符合“迭代处理”要求的。在c语言和其他很多 语言中，使用递归过程的迭代处理会和普通的递归处理一样，在每次递归中保存一些值，导致无法到达很深的递归深度。在lisp 编译器的实现中使用了“尾递归”优化技术，即若一个函数在调用自身时（满足递归过程条件）将该调用放在最后执行，并且 无需保存多余的变量，将所有必要的变量输入下一层，那么编译器在执行的时候就不会保存多余的信息，而是像迭代那样直接 用下一层来覆盖当前层。
  多种形式的递归与迭代  线性递归  上面factorial的递归实现中每次进入一个下一层，保存的数据随n的增大是线性增长的。这种形式的递归处理叫做线性递归。</description>
    </item>
    
    <item>
      <title>编程语言的基本组成</title>
      <link>https://iluvata.github.io/post/2021-03-14_basic-elements-for-programming-language/</link>
      <pubDate>Sun, 14 Mar 2021 22:50:46 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-03-14_basic-elements-for-programming-language/</guid>
      <description>编程语言的基本组成  编程语言的基本组成是SICP的第一节讨论的内容。编程语言所需要的基本元素有3个：原子元素（原子过程、 原子数据结构）、将运算进行复合的能力、对过程进行抽象的能力。
 原子元素是语言本身提供给我们的最小过程与数据结构，如乘法 * ，整数数据类型. 在scheme中我们将 一个操作过程写在括号语句内，语句的第一个元素作为运用的过程（操作符），随后的元素作为操作数。如
(* 3 4)   运算复合的能力使我们能够从基本操作中构建复杂操作，如求解阶乘
(define (factorial n) (if (&amp;lt; n 2) 1 (* n (factorial (- n 1)))))   最后是构建抽象的能力，能够让我们不被所有实现细节扰乱思路，只把之前构建的函数当作黑盒直接拿来 使用
(factorial 4)    块结构–以牛顿法求平方根为例  牛顿法是用于求解方程根的算法，从一个猜测开始每次迭代得到一个更好的猜测，不断向根逼近，直到 一个我们指定的要求达到为止。 通过使用抽象和运算符合的能力，我们能够构造improve, good-enough?等方法，最终构造出我们想要的 sqrt算法。
(define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (better-guess guess x) x))) (define (sqrt x) (sqrt-iter 2.0 x))  在求解的过程中，我们定义的一些方法只有在sqrt中才会被用到，如improve, good-enough?等。为了 防止和其他代码名称冲突，可以把他们全都放到sqrt的定义内，让他们的作用域只限于sqrt.</description>
    </item>
    
    <item>
      <title>在spacemacs中写scheme</title>
      <link>https://iluvata.github.io/post/2021-02-02_scheme-in-emacs/</link>
      <pubDate>Tue, 02 Feb 2021 22:35:46 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-02-02_scheme-in-emacs/</guid>
      <description>参考资料：官方文档 在spacemacs安装scheme环境 在emacs里学习SICP geiser文档
windows安装  一开始看官方文档和 在spacemacs安装scheme环境 做了好久，试图在windows上搭起环境，但是中间遇到好多问题，这里记下几个。。
 首先是 chicken 的安装。文档只说了apt包，但其实pip包也可以？（没试过）。我用的是windows的chocolatey，成功安装了。
 在安装了 chicken 后，为了完整安装对应文档（不知道为什么不能把文档放到同个包里一起安装了。。。），还要运行一下命令：
$ chicken-install -s apropos chicken-doc $ cd `csi -p &amp;#39;(chicken-home)&amp;#39;` $ curl https://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz | sudo tar zx  在尝试用powershell运行第一条指令时提示不存在cp指令中断了。查了好久资料后发现可以用git shell运行成功。
 然后第二条指令其实是运行 csi chicken scheme 解释器后运行 &amp;#39;(chicken-home)&amp;#39; ，结果作为输出，进入chicken安装目录。
 我在安装chicken包时看到安装目录在 c:/tools/chicken 下，就直接转过去了（不知道为什么，解释器中这条命令也运行失败。。）
 最后是在当前目录下载chicken-doc并且解tar包。但我是在windows下，就手动用浏览器访问https://3e8.org/pub/chicken-doc/ 发现有zip包，下载下来解压后放到 c:/tools/chicken 下，这步也算完成了。
 接着按照第二个博客中的步骤，确实可以运行了，但看不到输出也不会报错，重启后甚至又不能运行了。。。
 太折磨人了，明天试下转到linux用第三个博客中的步骤。
  linux安装配置  在 dotspacemacs-configuration-layers 中添加scheme, 在终端安装 mit-scheme 。emacs打开scm文件后 M-x run-geiser ，回到scm文件窗口 C-c C-s 选择mit.</description>
    </item>
    
  </channel>
</rss>
